@model IEnumerable<Property>

@{
    ViewData["Title"] = "BevoBnB - Book Unique Places to Stay";
}

<div class="container-fluid p-0">
    <!-- Sticky Search Header -->
    <div class="sticky-top bg-white py-3">
        <div class="container">
            <h2 class="h4 mb-3">Search Properties</h2>
            <form asp-controller="Home" asp-action="Search" method="get">
                <div class="row g-3">
                    <div class="col-md-3">
                        <div class="form-floating">
                            <input type="text" name="location" class="form-control rounded-pill" id="location"
                                   placeholder="Where to?" value="@Context.Request.Query["location"]" />
                            <label for="location">Where to?</label>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="form-floating">
                            <input type="text" name="propertyNumber" class="form-control rounded-pill" id="propertyNumber"
                                   placeholder="Property #" value="@Context.Request.Query["propertyNumber"]" />
                            <label for="propertyNumber">Property #</label>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="form-floating">
                            <input type="date" name="checkIn" class="form-control rounded-pill" id="checkIn"
                                   value="@Context.Request.Query["checkIn"]" />
                            <label for="checkIn">Check-in</label>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="form-floating">
                            <input type="date" name="checkOut" class="form-control rounded-pill" id="checkOut"
                                   value="@Context.Request.Query["checkOut"]" />
                            <label for="checkOut">Check-out</label>
                        </div>
                    </div>
                    <div class="col-md-3 d-flex gap-2">
                        <button type="submit" class="btn btn-primary flex-grow-1 rounded-pill d-flex align-items-center justify-content-center gap-2">
                            <i class="bi bi-search" style="font-size: 0.9rem;"></i>
                            <span>Search</span>
                        </button>
                        <button type="button" class="btn btn-outline-secondary rounded-pill d-flex align-items-center justify-content-center"
                                style="width: 42px;" id="toggleFilters">
                            <i class="bi bi-sliders" style="font-size: 1rem;"></i>
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Category Icons Section -->
<div class="container mt-4 border-bottom">
    <div class="d-flex gap-4 overflow-auto pb-2 scrollbar-hide">
        <a asp-controller="Home"
           asp-action="Search"
           asp-route-location="@Context.Request.Query["location"]"
           asp-route-checkIn="@Context.Request.Query["checkIn"]"
           asp-route-checkOut="@Context.Request.Query["checkOut"]"
           asp-route-guests="@Context.Request.Query["guests"]"
           class="text-decoration-none">
            <div class="text-center category-tab">
                <div class="mb-2">
                    <i class="bi bi-house-door h4"></i>
                </div>
                <div class="small">All</div>
            </div>
        </a>
        @foreach (var category in ViewBag.Categories)
        {
            <a asp-controller="Home"
               asp-action="Search"
               asp-route-categories="@category.CategoryID"
               asp-route-location="@Context.Request.Query["location"]"
               asp-route-checkIn="@Context.Request.Query["checkIn"]"
               asp-route-checkOut="@Context.Request.Query["checkOut"]"
               asp-route-guests="@Context.Request.Query["guests"]"
               class="text-decoration-none">
                <div class="text-center category-tab @((Context.Request.Query["categories"].Count > 0 && Context.Request.Query["categories"].Any(c => c == category.CategoryID.ToString())) ? "active" : "")">
                    <div class="mb-2">
                        @switch (category.CategoryName.ToLower())
                        {
                            case "apartment":
                                <i class="bi bi-building h4"></i>
                                break;
                            case "cabin":
                                <i class="bi bi-house h4"></i>
                                break;
                            case "condo":
                                <i class="bi bi-buildings h4"></i>
                                break;
                            case "hotel":
                                <i class="bi bi-building-fill h4"></i>
                                break;
                            default:
                                <i class="bi bi-house-door h4"></i>
                                break;
                        }
                    </div>
                    <div class="small">@category.CategoryName</div>
                </div>
            </a>
        }
    </div>
</div>


    <!-- Advanced Search Fields -->
    <div class="col-12">
        <div class="search-filters" id="advancedSearch" style="display: none;">
            <form asp-controller="Home" asp-action="Search" method="get" class="container shadow-sm py-3" id="advancedSearchForm">
                <!-- Hidden fields for main search parameters -->
                <input type="hidden" name="location" value="@Context.Request.Query["location"]" />
                <input type="hidden" name="propertyNumber" value="@Context.Request.Query["propertyNumber"]" />
                <input type="hidden" name="checkIn" value="@Context.Request.Query["checkIn"]" />
                <input type="hidden" name="checkOut" value="@Context.Request.Query["checkOut"]" />

                <div class="container">
                    <div class="card-body">
                        <div class="row g-3">
                            <!-- Location and Guest Options -->
                            <div class="col-md-6">
                                <label class="form-label">State</label>
                                <input type="text" name="state" class="form-control"
                                       placeholder="Enter state" value="@Context.Request.Query["state"]" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Number of Guests</label>
                                <input type="number" name="guests" class="form-control"
                                       min="1" value="@Context.Request.Query["guests"]" />
                            </div>

                            <!-- Price Range -->
                            <div class="col-md-6">
                                <label class="form-label">Price Range (per night)</label>
                                <div class="input-group">
                                    <input type="number" name="minPrice" class="form-control"
                                           placeholder="Min" min="0" value="@Context.Request.Query["minPrice"]" />
                                    <input type="number" name="maxPrice" class="form-control"
                                           placeholder="Max" min="0" value="@Context.Request.Query["maxPrice"]" />
                                </div>
                            </div>

                            <!-- Bedroom Range -->
                            <div class="col-md-6">
                                <label class="form-label">Bedrooms Range</label>
                                <div class="input-group">
                                    <input type="number" name="minBedrooms" class="form-control"
                                           placeholder="Min" min="1" value="@Context.Request.Query["minBedrooms"]" />
                                    <input type="number" name="maxBedrooms" class="form-control"
                                           placeholder="Max" min="1" value="@Context.Request.Query["maxBedrooms"]" />
                                </div>
                            </div>

                            <!-- Bathroom Range -->
                            <div class="col-md-6">
                                <label class="form-label">Bathrooms Range</label>
                                <div class="input-group">
                                    <input type="number" name="minBathrooms" class="form-control"
                                           placeholder="Min" min="1" value="@Context.Request.Query["minBathrooms"]" />
                                    <input type="number" name="maxBathrooms" class="form-control"
                                           placeholder="Max" min="1" value="@Context.Request.Query["maxBathrooms"]" />
                                </div>
                            </div>

                            <!-- Rating Range -->
                            <div class="col-md-6">
                                <label class="form-label">Rating Range</label>
                                <div class="input-group">
                                    <input type="number" name="minRating" class="form-control"
                                           placeholder="Min" min="1" max="5" step="0.1"
                                           value="@Context.Request.Query["minRating"]" />
                                    <input type="number" name="maxRating" class="form-control"
                                           placeholder="Max" min="1" max="5" step="0.1"
                                           value="@Context.Request.Query["maxRating"]" />
                                </div>
                            </div>

                            <!-- Categories -->
                            <div class="col-md-12">
                                <label class="form-label">Categories</label>
                                <div class="d-flex flex-wrap gap-2">
                                    @foreach (var category in ViewBag.Categories)
                                    {
                                        <div class="form-check">
                                            <input type="checkbox" name="categories" class="form-check-input"
                                                   value="@category.CategoryID"
                                            @((Context.Request.Query["categories"].Count > 0 && Context.Request.Query["categories"].Any(c => c == category.CategoryID.ToString())) ? "checked" : "") />
                                            <label class="form-check-label">@category.CategoryName</label>
                                        </div>
                                    }
                                </div>
                            </div>

                            <!-- Amenities -->
                            <div class="col-md-12">
                                <label class="form-label">Amenities</label>
                                <div class="d-flex gap-4">
                                    <div class="form-check">
                                        <input type="checkbox" name="petsAllowed" class="form-check-input" value="true"
                                        @(Context.Request.Query["petsAllowed"] == "true" ? "checked" : "") />
                                        <label class="form-check-label">Pets Allowed</label>
                                    </div>
                                    <div class="form-check">
                                        <input type="checkbox" name="freeParking" class="form-check-input" value="true"
                                        @(Context.Request.Query["freeParking"] == "true" ? "checked" : "") />
                                        <label class="form-check-label">Free Parking</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card-footer">
                        <button type="submit" class="btn btn-primary">Apply Filters</button>
                        <button type="button" class="btn btn-secondary" onclick="clearFilters()">Clear Filters</button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Property Grid -->
    <div class="container py-4">
        <div class="mb-3">
            <span class="text-muted">Showing @ViewBag.FilteredCount of @ViewBag.TotalCount Properties</span>
        </div>

        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-4 g-4">
            @foreach (var property in Model.Where(p => p.PropertyStatus))
            {
                <div class="col">
                    <div class="card h-100 border-0 shadow-sm property-card">
                        <img src="@property.ImageURL" class="card-img-top" Height="32%" alt="@property.PropertyName" />
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start mb-2">
                                <div>
                                    <div class="d-flex gap-2 mb-2">
                                        <span class="badge bg-primary">@property.Category.CategoryName</span>
                                        <span class="badge bg-secondary">#@property.PropertyNumber</span>
                                    </div>
                                    <h5 class="card-title mb-0">@property.Street</h5>
                                </div>
                                <div class="text-end">
                                    @{
                                        var validReviews = property.Reviews?.Where(r => r.DisputeStatus != DisputeStatus.ValidDispute);
                                        if (validReviews?.Any() == true)
                                        {
                                            var avgRating = validReviews.Average(r => r.Rating);
                                            <i class="bi bi-star-fill text-warning"></i>
                                            <span>@avgRating.ToString("F1")</span>
                                        }
                                        else
                                        {
                                            <small class="text-muted">No reviews yet</small>
                                        }
                                    }
                                </div>
                            </div>
                            <p class="card-text text-muted mb-2">
                                @property.City, @property.State
                            </p>
                            <p class="card-text">
                                <i class="bi bi-people"></i> @property.GuestsAllowed guests
                                <br />
                                <i class="bi bi-door-closed"></i> @property.Bedrooms @(property.Bedrooms == 1 ? "bedroom" : "bedrooms")
                                <br />
                                <i class="bi bi-water"></i> @property.Bathrooms @(property.Bathrooms == 1 ? "bathroom" : "bathrooms")
                            </p>
                            <p class="card-text mt-2">
                                <span class="fw-bold">@property.WeekdayPrice.ToString("C")</span> / night
                                @if (property.DiscountRate > 0)
                                {
                                    <br />
                                    <small class="text-success">
                                        @property.DiscountRate.Value.ToString("P0") off for @property.MinNightsForDiscount+ nights
                                    </small>
                                }
                            </p>
                        </div>
                        <div class="card-footer bg-transparent border-0">
                            <a asp-controller="Home"
                               asp-action="Details"
                               asp-route-id="@property.PropertyID"
                               class="btn btn-outline-primary w-100 rounded-pill">
                                View Details
                            </a>
                        </div>
                    </div>
                </div>
            }
        </div>

        @if (!Model.Any(p => p.PropertyStatus))
        {
            <div class="text-center my-5">
                <i class="bi bi-house-x display-1 text-muted"></i>
                <h3 class="mt-3">No properties found</h3>
                <p class="text-muted">Try adjusting your search criteria</p>
            </div>
        }
    </div>
</div>

<style>
    .scrollbar-hide::-webkit-scrollbar {
        display: none;
    }

    .scrollbar-hide {
        -ms-overflow-style: none;
        scrollbar-width: none;
    }

    .category-tab {
        opacity: 0.7;
        transition: opacity 0.2s;
        padding: 8px 16px;
        border-bottom: 2px solid transparent;
    }

        .category-tab:hover {
            opacity: 1;
            border-bottom: 2px solid #0d6efd;
        }
    .category-tab.active {
        opacity: 1;
        border-bottom: 2px solid #0d6efd;
    }

    .form-check-label i {
        margin-right: 0.5rem;
    }

    .property-card {
        transition: transform 0.2s;
    }

        .property-card:hover {
            transform: translateY(-5px);
        }

</style>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const checkInInput = document.getElementById('checkIn');
            const checkOutInput = document.getElementById('checkOut');
            const searchForm = document.getElementById('searchForm');
            const advancedSearchForm = document.getElementById('advancedSearchForm');
            const toggleFilters = document.getElementById('toggleFilters');
            const advancedSearch = document.getElementById('advancedSearch');

            // Date validation setup
            if (checkInInput && checkOutInput) {
                const today = new Date().toISOString().split('T')[0];
                checkInInput.min = today;

                checkInInput.addEventListener('change', function () {
                    checkOutInput.min = this.value;
                    if (checkOutInput.value && checkOutInput.value < this.value) {
                        checkOutInput.value = this.value;
                    }
                });
            }

            // Toggle advanced filters
            if (toggleFilters && advancedSearch) {
                let filtersVisible = false;
                toggleFilters.addEventListener('click', function () {
                    filtersVisible = !filtersVisible;
                    advancedSearch.style.display = filtersVisible ? 'block' : 'none';
                    toggleFilters.classList.toggle('active', filtersVisible);
                });
            }

            // Form validation
            const validateForm = function(event, form) {
                if (checkInInput && checkOutInput) {
                    const checkIn = new Date(checkInInput.value);
                    const checkOut = new Date(checkOutInput.value);

                    if (checkOut < checkIn) {
                        event.preventDefault();
                        alert('Check-out date must be after check-in date');
                        checkOutInput.value = checkInInput.value;
                        return false;
                    }
                }

                // Validate bedroom range
                const minBedrooms = form.querySelector('input[name="minBedrooms"]');
                const maxBedrooms = form.querySelector('input[name="maxBedrooms"]');
                if (minBedrooms && maxBedrooms && 
                    minBedrooms.value && maxBedrooms.value && 
                    parseInt(minBedrooms.value) > parseInt(maxBedrooms.value)) {
                    event.preventDefault();
                    alert('Maximum bedrooms must be greater than or equal to minimum bedrooms');
                    return false;
                }

                // Validate bathroom range
                const minBathrooms = form.querySelector('input[name="minBathrooms"]');
                const maxBathrooms = form.querySelector('input[name="maxBathrooms"]');
                if (minBathrooms && maxBathrooms && 
                    minBathrooms.value && maxBathrooms.value && 
                    parseInt(minBathrooms.value) > parseInt(maxBathrooms.value)) {
                    event.preventDefault();
                    alert('Maximum bathrooms must be greater than or equal to minimum bathrooms');
                    return false;
                }

                // Validate rating range
                const minRating = form.querySelector('input[name="minRating"]');
                const maxRating = form.querySelector('input[name="maxRating"]');
                if (minRating && maxRating && 
                    minRating.value && maxRating.value && 
                    parseFloat(minRating.value) > parseFloat(maxRating.value)) {
                    event.preventDefault();
                    alert('Maximum rating must be greater than or equal to minimum rating');
                    return false;
                }

                // Validate price range
                const minPrice = form.querySelector('input[name="minPrice"]');
                const maxPrice = form.querySelector('input[name="maxPrice"]');
                if (minPrice && maxPrice && 
                    minPrice.value && maxPrice.value && 
                    parseFloat(minPrice.value) > parseFloat(maxPrice.value)) {
                    event.preventDefault();
                    alert('Maximum price must be greater than or equal to minimum price');
                    return false;
                }

                return true;
            };

            // Apply validation to both forms
            if (searchForm) {
                searchForm.addEventListener('submit', function(event) {
                    return validateForm(event, this);
                });
            }

            if (advancedSearchForm) {
                advancedSearchForm.addEventListener('submit', function(event) {
                    return validateForm(event, this);
                });
            }

            // Show advanced filters if any are active
            window.addEventListener('load', function () {
                const urlParams = new URLSearchParams(window.location.search);
                const advancedParams = [
                    'minPrice', 'maxPrice', 'minBedrooms', 'maxBedrooms',
                    'minBathrooms', 'maxBathrooms', 'minRating', 'maxRating',
                    'petsAllowed', 'freeParking', 'state', 'categories'
                ];

                const hasAdvancedFilters = advancedParams.some(param => urlParams.has(param));

                if (hasAdvancedFilters && toggleFilters && advancedSearch) {
                    filtersVisible = true;
                    advancedSearch.style.display = 'block';
                    toggleFilters.classList.add('active');
                }
            });
        });

        // Clear filters function
        function clearFilters() {
            const form = document.getElementById('advancedSearchForm');
            if (form) {
                // Clear all inputs except hidden fields
                form.querySelectorAll('input:not([type="hidden"])').forEach(input => {
                    if (input.type === 'checkbox') {
                        input.checked = false;
                    } else {
                        input.value = '';
                    }
                });
                form.submit();
            }
        }
    </script>
}